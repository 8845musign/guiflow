{
  "name": "uiflow",
  "version": "1.1.0",
  "description": "uiflow - the simplest way to write down your ui-flow diagram like markdown",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "bin": {
    "uiflow": "./bin/uiflow"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hirokidaichi/uiflow.git"
  },
  "author": {
    "name": "hirokidaichi"
  },
  "license": "MIT",
  "dependencies": {
    "option-parser": "^0.1.3",
    "spawn-stream": "^1.0.2",
    "stream-from-promise": "^1.0.0",
    "string-to-stream": "^1.0.1",
    "through2": "^2.0.1"
  },
  "bugs": {
    "url": "https://github.com/hirokidaichi/uiflow/issues"
  },
  "homepage": "https://github.com/hirokidaichi/uiflow",
  "readme": "# uiflow\n\nマークダウン風のテキストからUI Flowsのグラフを生成するコンパイラ\n\n## UI Flowsとは？\n\nWebサイトやスマホアプリなどのユーザーインタフェースを設計する際に、より簡単な表現で全体の流れを記述する次のような図のことです。\n\n![simple.png](https://qiita-image-store.s3.amazonaws.com/0/35671/83a65590-8ea7-a124-0a86-ca9cb967402b.png \"simple.png\")\n\n具体的なUI設計に触れず、\n\n* ユーザーが見るもの\n* ユーザーがする行動\n\nに注目することでシンプルにUIの必要条件、あるいは骨子を記述することができます。\n\n``uiflow``コンパイラは、次のような簡潔な表現でこのような図を作図することができます。\n\n```markdown:sample.txt\n[最初に]\nユーザーが見るものを書きます。\n--\nユーザーがする行動を書きます。\n\n[次に]\nユーザーが見るもの\n--\nユーザーがすること１\n==> その結果１\nユーザーがすること２\n==> その結果２\n\n[その結果１]\n結果\n\n[その結果２]\n結果\n```\n\n## インストール方法\n\nグラフの生成には[Graphviz](http://www.graphviz.org/)を用います。brewなどを通じてinstallしておいてください。\n\n\n```\nbrew install graphviz\nnpm install -g uiflow\n```\n\n## コマンドの使い方\n\n### シンプルな使い方\n\n```bash:\nuiflow -i myapp.txt -o myapp.png -f png  \n```\n\nmyapp.txtをpng形式で、myapp.pngに変換する。\n\n### svgで出力\n\n```bash:\nuiflow -i myapp.txt -f svg\n```\nmyapp.txtをsvg形式で、標準出力に表示する。\n\n## uiflow形式の文法\n\n### 基本ブロック\n\n```markdown:基本ブロック\n[ページ名]\n表示要素1\n表示要素2\n表示要素3\n--\n行動要素1\n===> 遷移先ページ1名\n行動要素2\n===> 遷移先ページ2名\n```\n\n\n![base.png](https://qiita-image-store.s3.amazonaws.com/0/35671/f2b4855d-a53c-5414-50f1-de4f07bc2f16.png \"base.png\")\n\n### 基本ブロックをつなげる\n\n\n```markdown:基本ブロック\n[ページ名]\n表示要素1\n--\n行動要素1\n\n[ページ名2]\n表示要素\n--\n行動要素\n\n[ページ名3]\n表示要素\n--\n行動要素\n```\n行動要素の``==>``を省略すると次の基本ブロックに自動的につながります。\n\n![base.png](https://qiita-image-store.s3.amazonaws.com/0/35671/01f02911-6738-549f-dd93-b829887843fb.png \"base.png\")\n\n\n### 遷移に名前をつける\n``=={hogehoge}=>``と表記して、遷移に名前をつけることができます。\n\n```\n[最初に]\nユーザーが見るものを書きます。\n--\nユーザーがする行動を書きます。\n\n[次に]\nユーザーが見るもの\n--\nユーザーがすること１\n=={遷移アクション名}=> その結果１\nユーザーがすること２\n=={API名など}=> その結果２\n\n[その結果１]\n結果\n\n[その結果２]\n結果\n\n```\n![simple-graph.png](https://qiita-image-store.s3.amazonaws.com/0/35671/eff43bff-b436-c9e5-815e-559143cec750.png \"simple-graph.png\")\n\n\n### 少し複雑な例\n\n```markdown:complex\n\n[初回通知]\n通知の確認ダイアログ\n--\nOK\n\n[国選択]\nリージョンの選択\nデフォルトで日本\nOKボタン\n--\nOK\n\n[はじめよう]\nヒント情報\nはじめるボタン\n--\nヒントをスワイプ\n==> はじめよう\nLINEQを始める\n\n[非ログインメイン画面]\nログインすると全ての機能を使えますアラート\nフィード\n通知アイコン\n検索アイコン\nホーム\n分野\nQボタン\nランキング\nマイページ(N)\n------\nアラートをタップ\n==> 利用規約\n分野をタップ\n==> 分野\nQボタンをタップ\n==> ログイン確認\nランキングをタップ\n==> ランキング\n\n\n[利用規約]\n利用規約の表示\n\n[分野]\n分野詳細\n\n[ランキング]\nランキング詳細\n\n```\n![base.png](https://qiita-image-store.s3.amazonaws.com/0/35671/5f26cd34-39bf-4dd3-c2b9-2ac892abbdd8.png \"base.png\")\n\n\n## uiflowをライブラリとして使う\n\n次のように使うことができます。\n\n```javascript:sampleusage\nvar uiflow = require(\"uiflow\");\n\n// dot形式で書き出す\nvar dot = uiflow.compile(\"[テスト]\\nユーザーが見るもの\\nユーザがすること\\n\");\n\n// パースされたAST表現をjsonで書き出す\nvar json = uiflow.json(\"[テスト]\\nユーザーが見るもの\\nユーザがすること\\n\");\n\n// graphvizをつかって、svgに変換したものを標準出力に渡す。\nuiflow.build(\"ソースコード\",\"svg\")\n\t.pipe(process.stdout);\n```\n\n## SEE ALSO\n\n* [画面遷移に疑問を感じたあなたにオススメするUI Flowsというツール](http://www.standardinc.jp/reflection/article/ui-flows/)\n* [A shorthand for designing UI flows](https://signalvnoise.com/posts/1926-a-shorthand-for-designing-ui-flows)\n\n\n\n\n",
  "readmeFilename": "README.md",
  "gitHead": "0f09c0b8b43d9f7a78e632e0bb60205b84810234",
  "_id": "uiflow@1.1.0",
  "_shasum": "c311095ffdd076b0c4806d6bf7cf0601f75e802e",
  "_from": "uiflow@^1.0.9"
}
